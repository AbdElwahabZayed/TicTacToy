


//import clientspackage.ClientGameFrame;
import java.awt.GridLayout;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.Socket;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import jdk.nashorn.internal.scripts.JO;

//import tictactoy.login.LoginFram;
//import tictactoy.sinup.SinupFrame;

/**
 *
 * @author HP
 */
public class HomeFrame extends javax.swing.JFrame {
   // GridLayout gridLayout = new GridLayout();
    Socket s;
    PrintStream        ps;
    BufferedReader      d;
    InputStreamReader dis;
    String            respond;
    Thread t;
    String userName;
    RecordedGamesList rg;
    
    Vector<String> available=new Vector<>();
    public HomeFrame(String un) {
        initComponents();
        setResizable(false);
        userName=un;
        System.out.println("  "+un);
         try {
                        s=new Socket("127.0.0.1",5009);
                        ps=new PrintStream(s.getOutputStream());
                        dis=new InputStreamReader(s.getInputStream());
                        d= new BufferedReader(dis);
                        ps.println("newHome-"+userName);
                        label_UserName.setText("User Name: "+userName);
                    } catch (IOException ex) {
                        Logger.getLogger(LoginFram.class.getName()).log(Level.SEVERE, null, ex);
                    }  
           t= new Thread(new Runnable() {
                @Override
                public void run() {
                    
                  try {
                     while(true&& d !=null  && s != null && !s.isClosed()  && s.isConnected() && !s.isInputShutdown() && !s.isOutputShutdown()){
                        
                            respond = d.readLine();
                            checkRespond(respond);
                        }  
                     } catch (IOException ex) {
                            System.out.println("HomeFrame Check Your Connection....");
                            t.stop();
                        }
             }
            });
                   t.start();
       // setLayout(gridLayout);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnRecordings = new javax.swing.JButton();
        btnMvsMNetwork = new javax.swing.JButton();
        btnMvsComputer = new javax.swing.JButton();
        btnMvsMLocally = new javax.swing.JButton();
        label_UserName = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 204, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 153, 255)));

        jLabel1.setFont(new java.awt.Font("Sitka Text", 1, 14)); // NOI18N
        jLabel1.setText("Which do you prefer?");

        btnRecordings.setBackground(new java.awt.Color(255, 204, 255));
        btnRecordings.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        btnRecordings.setText("Your Recordings");
        btnRecordings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecordingsActionPerformed(evt);
            }
        });

        btnMvsMNetwork.setBackground(new java.awt.Color(255, 204, 255));
        btnMvsMNetwork.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        btnMvsMNetwork.setText("Man Against Man Via Network");
        btnMvsMNetwork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMvsMNetworkActionPerformed(evt);
            }
        });

        btnMvsComputer.setBackground(new java.awt.Color(255, 204, 255));
        btnMvsComputer.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        btnMvsComputer.setText("Man Against Computer ");
        btnMvsComputer.setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
        btnMvsComputer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMvsComputerActionPerformed(evt);
            }
        });

        btnMvsMLocally.setBackground(new java.awt.Color(255, 204, 255));
        btnMvsMLocally.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        btnMvsMLocally.setText("Man Against Man Locally");
        btnMvsMLocally.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMvsMLocallyActionPerformed(evt);
            }
        });

        label_UserName.setText("jLabel2");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnMvsComputer)
                                .addGap(20, 20, 20)
                                .addComponent(btnMvsMLocally))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(label_UserName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(20, 20, 20)
                        .addComponent(btnMvsMNetwork))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(218, 218, 218)
                        .addComponent(btnRecordings)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(label_UserName))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMvsMNetwork, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMvsComputer, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMvsMLocally, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnRecordings, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(59, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(59, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(39, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnMvsMNetworkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMvsMNetworkActionPerformed
        ps.println("getAvailable");
        //wait
    }//GEN-LAST:event_btnMvsMNetworkActionPerformed

    private void btnMvsMLocallyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMvsMLocallyActionPerformed
        ManvsManFram mVsm=new ManvsManFram(userName);
        mVsm.setLocationRelativeTo(this);
        mVsm.setVisible(true);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_btnMvsMLocallyActionPerformed

    private void btnRecordingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecordingsActionPerformed
        ps.println("getAvailabeRecord-"+userName);
    }//GEN-LAST:event_btnRecordingsActionPerformed

    private void btnMvsComputerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMvsComputerActionPerformed

        computer c=new computer(userName);
        c.setLocationRelativeTo(this);
        c.setVisible(true);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_btnMvsComputerActionPerformed
    private void checkRespond(String res){
         String[] code=res.split("-");
          String[] code1=res.split("/");
         switch(code[0]){
             case "request":
                 acceptReq(code[1]);
                 break;
            case "avalible":
                available.clear();
                
                for(int i=1;i<code.length;i++){
                    available.add(code[i]);
                }
                available.remove("");
                ActivePeople  AP= new ActivePeople(available,userName,this);
                AP.setLocationRelativeTo(this);
                AP.setVisible(true);
                this.setVisible(false);
                
                break;
         }
         switch(code1[0]){
         case "rcordes":
                 recordsHandle(res);
                break;
         
         }
         /*String[] avlPeople=res.split("-");
         for(String av : avlPeople ){
             available.add(av);
         }*/
         
     }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new HomeFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMvsComputer;
    private javax.swing.JButton btnMvsMLocally;
    private javax.swing.JButton btnMvsMNetwork;
    private javax.swing.JButton btnRecordings;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel label_UserName;
    // End of variables declaration//GEN-END:variables

    private void acceptReq(String string/*P1*/) {
        
        int result=JOptionPane.showConfirmDialog(this, "Player "+string+" request to play with you game", "Request",JOptionPane.OK_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE);
        if(result==JOptionPane.OK_OPTION){
            System.out.println(userName+" <--un      P1_->"+string);
            ps.println("acceptRequest-"+string/*P1*/+"-"+userName/*P2*/);//send "accept" request from ---> "P1" ,,,, And I am ===> "P2"
            ClientGameFrame clientFrame= new ClientGameFrame(userName,string,userName,2,this);
            clientFrame.setVisible(true);
            clientFrame.setLocationRelativeTo(this);
            this.setVisible(false);
            /*this.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
            this.dispose();*/
            
        }
        if(result==JOptionPane.CANCEL_OPTION){
            ps.println("rejected-"+string);
        }
    }

    private void recordsHandle(String res) {
        System.out.println("    "+res);
        String[] numofgames=res.split("/");

            rg=new RecordedGamesList(res, userName, (numofgames.length-1),this);
            rg.setLocationRelativeTo(this);
            rg.setVisible(true);
            this.setVisible(false);

        
        /*this.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
        this.dispose();*/
    }
}
